// src/csharpGenerator/se_csharp_csharpGenerator.js

import { csharpGenerator } from './generator_instance.js';

    // --- ГЕНЕРАТОР СТРУКТУРЫ ---
      // src/csharpGenerator/se_csharp_csharpGenerator.js

// ... (начало файла и другие генераторы) ...

    csharpGenerator.forBlock['se_program_structure'] = function(block, csharpGenerator) {
      // 1. Собираем код из вложенных блоков, используя ПРАВИЛЬНЫЕ ИМЕНА ИЗ ВАШЕГО ИСХОДНОГО КОДА
      const initCode = csharpGenerator.statementToCode(block, 'INIT') || '';
      const mainCode = csharpGenerator.statementToCode(block, 'MAIN') || '';
      const saveCode = csharpGenerator.statementToCode(block, 'ON_SAVE') || '';

      // 2. Убираем лишние отступы, если код не пустой (этот код был правильным)
      const indent = '    ';
      const formattedInitCode = initCode ? initCode.split('\n').map(line => line ? indent + line : '').join('\n') : '';
      const formattedMainCode = mainCode ? mainCode.split('\n').map(line => line ? indent + line : '').join('\n') : '';
      const formattedSaveCode = saveCode ? saveCode.split('\n').map(line => line ? indent + line : '').join('\n') : '';
      
      // 3. Собираем переменные (этот код тоже был правильным)
      const TYPE_MAP = {
        'Number': 'double',
        'String': 'string',
        'Boolean': 'bool',
        'Vector3D': 'Vector3D',
        'Vector2D': 'Vector2',
        'EntityInfo': 'MyDetectedEntityInfo',
        'MyDetectedEntityInfo': 'MyDetectedEntityInfo'
      };
      
      const variables = block.workspace.getVariableMap().getAllVariables();
      const variableDeclarations = variables
        .map(v => {
            if (!v.type) return null;
            const varType = v.type === 'Array' 
              ? 'List<IMyTerminalBlock>' 
              : (TYPE_MAP[v.type] || 'object');
            return `${indent}${varType} ${csharpGenerator.getVariableName(v.getId())};`;
        })
        .filter(declaration => declaration !== null)
        .join('\n');

      // 4. Собираем финальный шаблон, вставляя код в нужные места
      const code = `
// C# Code generated by SE-Blockly
public Program()
{
${formattedInitCode}
}

public void Save()
{
${formattedSaveCode}
}

public void Main(string argument, UpdateType updateSource)
{
${formattedMainCode}
}

// Global Variables
${variableDeclarations}
`;
      return code.trim();
    };

    // ... (остальные ваши генераторы) ...

    csharpGenerator.forBlock['se_set_update_frequency'] = function(block, csharpGenerator) {
      const frequency = block.getFieldValue('FREQUENCY');
      return `Runtime.UpdateFrequency = UpdateFrequency.${frequency};\n`;
    };

    // --- ОБЩИЕ ГЕНЕРАТОРЫ ---
    csharpGenerator.forBlock['se_get_typed_block_by_name'] = function (block, csharpGenerator) {
        const blockName = csharpGenerator.valueToCode(block, 'BLOCK_NAME', csharpGenerator.ORDER_ATOMIC) || '""';
        const blockType = block.getFieldValue('BLOCK_TYPE');
        const code = `GridTerminalSystem.GetBlockWithName(${blockName}) as IMy${blockType}`;
        return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_get_blocks_of_type'] = function (block, csharpGenerator) {
        const blockType = block.getFieldValue('BLOCK_TYPE');
        const fullTypeName = `IMy${blockType}`;
        const code = `new Func<List<${fullTypeName}>>(() => { var list = new List<${fullTypeName}>(); GridTerminalSystem.GetBlocksOfType<${fullTypeName}>(list); return list; })()`;
        return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_get_blocks_in_group'] = function (block, csharpGenerator) {
        const groupName = csharpGenerator.valueToCode(block, 'GROUP_NAME', csharpGenerator.ORDER_ATOMIC) || '""';
        const code = `
((Func<List<IMyTerminalBlock>>)(() => {
    var list = new List<IMyTerminalBlock>();
    var group = GridTerminalSystem.GetBlockGroupWithName(${groupName});
    if (group != null) group.GetBlocks(list);
    return list;
}))()`.trim();
        return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };
    
    csharpGenerator.forBlock['se_is_block_found'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `(${blockCode} != null)`;
      return [code, csharpGenerator.ORDER_EQUALITY];
    };

    csharpGenerator.forBlock['se_set_enabled'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const enabled = csharpGenerator.valueToCode(block, 'ENABLED', csharpGenerator.ORDER_ATOMIC) || 'false';
        return `var b = (${blockCode}) as IMyFunctionalBlock; if (b != null) b.Enabled = ${enabled};\n`;
    };
    
    csharpGenerator.forBlock['se_set_use_conveyor'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const enabled = csharpGenerator.valueToCode(block, 'ENABLED', csharpGenerator.ORDER_ASSIGNMENT) || 'false';
      const code = `var funcBlock = (${blockCode}) as IMyFunctionalBlock; if (funcBlock != null) funcBlock.UseConveyorSystem = ${enabled};\n`;
      return code;
    };
    
    csharpGenerator.forBlock['se_get_block_property_boolean'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const property = block.getFieldValue('PROPERTY');
      const code = `((${blockCode}) as IMyTerminalBlock)?.${property} ?? false`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_echo'] = function (block, csharpGenerator) {
        const text = csharpGenerator.valueToCode(block, 'TEXT', csharpGenerator.ORDER_ATOMIC) || '""';
        return `Echo(${text}.ToString());\n`;
    };

    csharpGenerator.forBlock['se_program_argument'] = function (block) {
        return ['argument', csharpGenerator.ORDER_ATOMIC];
    };

    // --- ГЕНЕРАТОРЫ ОСВЕЩЕНИЯ ---
    csharpGenerator.forBlock['se_light_set_color'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const color = block.getFieldValue('COLOR');
        const r = parseInt(color.substring(1, 3), 16);
        const g = parseInt(color.substring(3, 5), 16);
        const b = parseInt(color.substring(5, 7), 16);
        return `var l = (${blockCode}) as IMyLightingBlock; if (l != null) l.Color = new Color(${r}, ${g}, ${b});\n`;
    };

    csharpGenerator.forBlock['se_light_set_radius'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const radius = csharpGenerator.valueToCode(block, 'RADIUS', csharpGenerator.ORDER_ASSIGNMENT) || '10.0f';
        return `var l = (${blockCode}) as IMyLightingBlock; if (l != null) l.Radius = (float)(${radius});\n`;
    };

    csharpGenerator.forBlock['se_light_set_intensity'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const intensity = csharpGenerator.valueToCode(block, 'INTENSITY', csharpGenerator.ORDER_ASSIGNMENT) || '5.0f';
        return `var l = (${blockCode}) as IMyLightingBlock; if (l != null) l.Intensity = (float)(${intensity});\n`;
    };

    // --- ГЕНЕРАТОРЫ МЕХАНИЗМОВ ---
    csharpGenerator.forBlock['se_piston_set_velocity'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const velocity = csharpGenerator.valueToCode(block, 'VELOCITY', csharpGenerator.ORDER_ASSIGNMENT) || '0';
      return `var p = (${blockCode}) as IMyPistonBase; if (p != null) p.Velocity = (float)${velocity};\n`;
    };

    csharpGenerator.forBlock['se_piston_change_limit'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const limitType = block.getFieldValue('LIMIT_TYPE');
        const value = csharpGenerator.valueToCode(block, 'VALUE', csharpGenerator.ORDER_ASSIGNMENT) || '0.0f';
        return `var p = (${blockCode}) as IMyPistonBase; if (p != null) p.${limitType} = (float)(${value});\n`;
    };

    csharpGenerator.forBlock['se_piston_get_position'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyPistonBase)?.CurrentPosition ?? 0.0f`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    csharpGenerator.forBlock['se_piston_get_status'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyPistonBase)?.Status.ToString() ?? "Unknown"`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_rotor_set_velocity'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const velocity = csharpGenerator.valueToCode(block, 'VELOCITY', csharpGenerator.ORDER_ASSIGNMENT) || '10.0f';
        return `var r = (${blockCode}) as IMyMotorStator; if (r != null) r.TargetVelocityRPM = (float)(${velocity});\n`;
    };

    csharpGenerator.forBlock['se_rotor_set_limits'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const lower = csharpGenerator.valueToCode(block, 'LOWER', csharpGenerator.ORDER_ASSIGNMENT) || 'float.MinValue';
      const upper = csharpGenerator.valueToCode(block, 'UPPER', csharpGenerator.ORDER_ASSIGNMENT) || 'float.MaxValue';
      return `var r = (${blockCode}) as IMyMotorStator; if (r != null) { r.LowerLimitDeg = (float)${lower}; r.UpperLimitDeg = (float)${upper}; }\n`;
    };

    csharpGenerator.forBlock['se_rotor_get_angle'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `(((${blockCode}) as IMyMotorStator)?.Angle ?? 0.0f) * (180.0f / (float)Math.PI)`;
        return [code, csharpGenerator.ORDER_MULTIPLICATIVE];
    };

    csharpGenerator.forBlock['se_landing_gear_lock_unlock'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const action = block.getFieldValue('ACTION');
      return `((${blockCode}) as IMyLandingGear)?.${action}();\n`;
    };

    csharpGenerator.forBlock['se_landing_gear_get_status'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyLandingGear)?.Status.ToString() ?? "Unknown"`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    csharpGenerator.forBlock['se_connector_lock_unlock'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const action = block.getFieldValue('ACTION');
      return `((${blockCode}) as IMyShipConnector)?.ApplyAction("${action}");\n`;
    };

    csharpGenerator.forBlock['se_connector_get_status'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyShipConnector)?.Status.ToString() ?? "Unknown"`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    // --- ГЕНЕРАТОРЫ ДВИЖЕНИЯ ---
     csharpGenerator.forBlock['se_thruster_set_override'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const override = csharpGenerator.valueToCode(block, 'OVERRIDE', csharpGenerator.ORDER_ASSIGNMENT) || '0.0f';
        return `var t = (${blockCode}) as IMyThrust; if (t != null) t.ThrustOverridePercentage = (float)(${override}) / 100.0f;\n`;
    };

     csharpGenerator.forBlock['se_thruster_get_thrust'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyThrust)?.CurrentThrust ?? 0.0f`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    csharpGenerator.forBlock['se_gyro_set_override'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const enabled = csharpGenerator.valueToCode(block, 'ENABLED', csharpGenerator.ORDER_ASSIGNMENT) || 'false';
      const code = `var gyro = (${blockCode}) as IMyGyro; if (gyro != null) gyro.GyroOverride = ${enabled};\n`;
      return code;
    };

    csharpGenerator.forBlock['se_gyro_set_rotation'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const axis = block.getFieldValue('AXIS');
      const value = csharpGenerator.valueToCode(block, 'VALUE', csharpGenerator.ORDER_ASSIGNMENT) || '0';
      const code = `var gyro = (${blockCode}) as IMyGyro; if (gyro != null) gyro.${axis} = (float)(${value} * Math.PI / 180.0);\n`;
      return code;
    };

    csharpGenerator.forBlock['se_controller_is_under_control'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyShipController)?.IsUnderControl ?? false`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_controller_get_gravity'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyShipController)?.GetNaturalGravity() ?? Vector3D.Zero`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    // --- ГЕНЕРАТОРЫ ИНВЕНТАРЯ ---
    csharpGenerator.forBlock['se_inventory_get_fill_percent'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((Func<double>)(() => {
    var inv = (${blockCode})?.GetInventory(0);
    if (inv != null && (double)inv.MaxVolume > 0) return ((double)inv.CurrentVolume / (double)inv.MaxVolume) * 100.0;
    return 0.0;
}))()`.trim();
        return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_inventory_transfer_item'] = function(block, csharpGenerator) {
        const amount = csharpGenerator.valueToCode(block, 'AMOUNT', csharpGenerator.ORDER_ATOMIC) || '1';
        const itemSubtype = csharpGenerator.valueToCode(block, 'ITEM_SUBTYPE', csharpGenerator.ORDER_ATOMIC) || '""';
        const itemType = block.getFieldValue('ITEM_TYPE');
        const sourceBlock = csharpGenerator.valueToCode(block, 'FROM_BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const destBlock = csharpGenerator.valueToCode(block, 'TO_BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `
{
    var sourceEntity = (${sourceBlock}) as IMyEntity;
    var destEntity = (${destBlock}) as IMyEntity;
    if (sourceEntity != null && sourceEntity.HasInventory && destEntity != null && destEntity.HasInventory)
    {
        var sourceInv = sourceEntity.GetInventory(0);
        var destInv = destEntity.GetInventory(0);
        var itemDef = MyDefinitionId.Parse("MyObjectBuilder_${itemType}/" + ${itemSubtype});
        var item = sourceInv.FindItem(itemDef);
        if (item.HasValue)
        {
            sourceInv.TransferItemTo(destInv, item.Value, (MyFixedPoint)(${amount}));
        }
    }
}
`;
        return code;
    };

    csharpGenerator.forBlock['se_inventory_get_item_amount'] = function(block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const itemSubtype = csharpGenerator.quote_(block.getFieldValue('ITEM_TYPE'));
        const code = `((Func<long>)(() => {
    var entity = (${blockCode}) as IMyEntity;
    if (entity == null || !entity.HasInventory) return 0;
    var inventory = entity.GetInventory(0);
    var itemDefinition = MyDefinitionId.Parse("MyObjectBuilder_Component/" + ${itemSubtype});
    return (long)inventory.GetItemAmount(itemDefinition);
}))()`;
        return [code, csharpGenerator.ORDER_ATOMIC];
    };

    // --- ГЕНЕРАТОРЫ ПРОИЗВОДСТВА ---
    csharpGenerator.forBlock['se_assembler_add_to_queue'] = function(block, csharpGenerator) {
        const amount = csharpGenerator.valueToCode(block, 'AMOUNT', csharpGenerator.ORDER_ATOMIC) || '1';
        const blueprintId = csharpGenerator.quote_(block.getFieldValue('BLUEPRINT_ID'));
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `
{
    var asm = (${blockCode}) as IMyAssembler;
    if (asm != null)
    {
        var blueprint = MyDefinitionId.Parse("MyObjectBuilder_BlueprintDefinition/" + ${blueprintId});
        asm.AddQueueItem(blueprint, (decimal)(${amount}));
    }
}
`;
        return code;
    };

    csharpGenerator.forBlock['se_assembler_get_queue_amount'] = function(block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const blueprintId = csharpGenerator.quote_(block.getFieldValue('BLUEPRINT_ID'));
        const code = `((Func<long>)(() => {
    var asm = (${blockCode}) as IMyAssembler;
    if (asm == null) return 0;
    var queue = new List<MyProductionItem>();
    asm.GetQueue(queue);
    long totalAmount = 0;
    string targetBlueprint = "MyObjectBuilder_BlueprintDefinition/" + ${blueprintId};
    foreach (var item in queue)
    {
        if (item.BlueprintId.ToString() == targetBlueprint)
        {
            totalAmount += (long)item.Amount;
        }
    }
    return totalAmount;
}))()`;
        return [code, csharpGenerator.ORDER_ATOMIC];
    };
    
    csharpGenerator.forBlock['se_assembler_set_repeating'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const repeating = csharpGenerator.valueToCode(block, 'REPEATING', csharpGenerator.ORDER_ASSIGNMENT) || 'false';
      return `var asm = (${blockCode}) as IMyAssembler; if (asm != null) asm.Repeating = ${repeating};\n`;
    };

    csharpGenerator.forBlock['se_production_is_working'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyProductionBlock)?.IsWorking ?? false`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };

    // --- ГЕНЕРАТОРЫ ЭНЕРГИИ ---
    csharpGenerator.forBlock['se_battery_get_charge'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const chargeType = block.getFieldValue('CHARGE_TYPE');
        let code = '0.0';
        switch (chargeType) {
            case 'CURRENT_PERCENT':
                code = `((Func<double>)(() => {
                    var b = (${blockCode}) as IMyBatteryBlock;
                    if (b == null || b.MaxStoredPower == 0) return 0.0;
                    return (b.CurrentStoredPower / b.MaxStoredPower) * 100.0;
                }))()`.trim();
                return [code, csharpGenerator.ORDER_FUNCTION_CALL];
            case 'CURRENT_MWH':
                code = `((${blockCode}) as IMyBatteryBlock)?.CurrentStoredPower ?? 0.0f`;
                break;
            case 'MAX_MWH':
                code = `((${blockCode}) as IMyBatteryBlock)?.MaxStoredPower ?? 0.0f`;
                break;
        }
        return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    csharpGenerator.forBlock['se_battery_get_input'] = function(block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyBatteryBlock)?.CurrentInput ?? 0.0f`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_battery_set_charge_mode'] = function(block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const mode = block.getFieldValue('MODE');
        const code = `var batt = (${blockCode}) as IMyBatteryBlock; if (batt != null) batt.ChargeMode = ChargeMode.${mode};\n`;
        return code;
    };

    csharpGenerator.forBlock['se_power_get_output'] = function (block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyPowerProducer)?.CurrentOutput ?? 0.0f`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    csharpGenerator.forBlock['se_power_get_max_output'] = function(block, csharpGenerator) {
        const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
        const code = `((${blockCode}) as IMyPowerProducer)?.MaxOutput ?? 0.0f`;
        return [code, csharpGenerator.ORDER_MEMBER];
    };

    // --- ГЕНЕРАТОРЫ ДИСПЛЕЕВ ---
    csharpGenerator.forBlock['se_lcd_write_text'] = function(block, csharpGenerator) {
      const text = csharpGenerator.valueToCode(block, 'TEXT', csharpGenerator.ORDER_ATOMIC) || '""';
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyTextPanel)?.WriteText(${text}.ToString(), false);\n`;
      return code;
    };

    csharpGenerator.forBlock['se_lcd_append_text'] = function(block, csharpGenerator) {
      const text = csharpGenerator.valueToCode(block, 'TEXT', csharpGenerator.ORDER_ATOMIC) || '""';
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyTextPanel)?.WriteText("\\n" + ${text}.ToString(), true);\n`;
      return code;
    };

    csharpGenerator.forBlock['se_lcd_clear'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyTextPanel)?.WriteText("", false);\n`;
      return code;
    };

    csharpGenerator.forBlock['se_lcd_set_font_size'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const size = csharpGenerator.valueToCode(block, 'SIZE', csharpGenerator.ORDER_ASSIGNMENT) || '1.0';
      const code = `var panel = (${blockCode}) as IMyTextPanel; if (panel != null) panel.FontSize = (float)${size};\n`;
      return code;
    };

    csharpGenerator.forBlock['se_lcd_set_color'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const target = block.getFieldValue('TARGET');
      const color = block.getFieldValue('COLOR');
      const code = `var panel = (${blockCode}) as IMyTextPanel; if (panel != null) panel.${target} = Color.${color};\n`;
      return code;
    };

    // --- ГЕНЕРАТОРЫ СЕНСОРОВ ---
    csharpGenerator.forBlock['se_sensor_get_last_detected'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMySensorBlock)?.LastDetectedEntity ?? new MyDetectedEntityInfo()`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_entity_info_is_empty'] = function(block, csharpGenerator) {
      const entityInfo = csharpGenerator.valueToCode(block, 'ENTITY_INFO', csharpGenerator.ORDER_ATOMIC) || 'new MyDetectedEntityInfo()';
      const code = `${entityInfo}.IsEmpty()`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_entity_info_get_property'] = function(block, csharpGenerator) {
      const entityInfo = csharpGenerator.valueToCode(block, 'ENTITY_INFO', csharpGenerator.ORDER_ATOMIC) || 'new MyDetectedEntityInfo()';
      const property = block.getFieldValue('PROPERTY');
      let code = `${entityInfo}.${property}`;
      if (property === 'Type' || property === 'Relationship') {
        code += '.ToString()';
      }
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    // --- ГЕНЕРАТОРЫ ТАЙМЕРОВ ---
    csharpGenerator.forBlock['se_timer_control'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const action = block.getFieldValue('ACTION');
      let methodName = (action === 'TriggerNow') ? 'Trigger' : action + 'Countdown';
      return `((${blockCode}) as IMyTimerBlock)?.${methodName}();\n`;
    };

    csharpGenerator.forBlock['se_timer_set_delay'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const delay = csharpGenerator.valueToCode(block, 'DELAY', csharpGenerator.ORDER_ASSIGNMENT) || '0';
      const code = `var t = (${blockCode}) as IMyTimerBlock; if (t != null) t.TriggerDelay = (float)${delay};\n`;
      return code;
    };

    csharpGenerator.forBlock['se_timer_is_counting_down'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyTimerBlock)?.IsCountingDown ?? false`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };
    
    // --- ГЕНЕРАТОРЫ ВЕКТОРОВ ---
    csharpGenerator.forBlock['se_vector_create'] = function(block, csharpGenerator) {
      const x = csharpGenerator.valueToCode(block, 'X', csharpGenerator.ORDER_ATOMIC) || '0';
      const y = csharpGenerator.valueToCode(block, 'Y', csharpGenerator.ORDER_ATOMIC) || '0';
      const z = csharpGenerator.valueToCode(block, 'Z', csharpGenerator.ORDER_ATOMIC) || '0';
      const code = `new Vector3D(${x}, ${y}, ${z})`;
      return [code, csharpGenerator.ORDER_NEW];
    };

    csharpGenerator.forBlock['se_vector_get_component'] = function(block, csharpGenerator) {
      const vector = csharpGenerator.valueToCode(block, 'VECTOR', csharpGenerator.ORDER_MEMBER) || 'Vector3D.Zero';
      const component = block.getFieldValue('COMPONENT');
      const code = `${vector}.${component}`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_vector_get_length'] = function(block, csharpGenerator) {
      const vector = csharpGenerator.valueToCode(block, 'VECTOR', csharpGenerator.ORDER_MEMBER) || 'Vector3D.Zero';
      const code = `${vector}.Length()`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    // --- ГЕНЕРАТОРЫ ОРУЖИЯ ---
    csharpGenerator.forBlock['se_weapon_shoot_toggle'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const action = block.getFieldValue('ACTION');
      return `((${blockCode}) as IMyUserControllableGun)?.ApplyAction("${action}");\n`;
    };

    csharpGenerator.forBlock['se_weapon_shoot_once'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      return `((${blockCode}) as IMyUserControllableGun)?.ShootOnce();\n`;
    };

    csharpGenerator.forBlock['se_weapon_get_ammo'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyUserControllableGun)?.GetAmmunitionAmount() ?? 0`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_weapon_is_shooting'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `((${blockCode}) as IMyUserControllableGun)?.IsShooting ?? false`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_me'] = function(block, csharpGenerator) {
        return ['Me', csharpGenerator.ORDER_ATOMIC];
    };

    csharpGenerator.forBlock['se_grid_get_property'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'Me';
      const property = block.getFieldValue('PROPERTY');
  
      let defaultValue = 'null';
      switch(property) {
        case 'DisplayName':
          defaultValue = '""';
          break;
        case 'Mass':
          defaultValue = '0';
          break;
        case 'IsStatic':
          defaultValue = 'false';
          break;
        }

      const code = `((${blockCode})?.CubeGrid.${property} ?? ${defaultValue})`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_storage_write'] = function(block, csharpGenerator) {
      const value = csharpGenerator.valueToCode(block, 'VALUE', csharpGenerator.ORDER_ATOMIC) || '""';
      return `Me.Storage = ${value}.ToString();\n`;
    };

    csharpGenerator.forBlock['se_storage_read'] = function(block, csharpGenerator) {
      return ['Me.Storage', csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_controller_get_input'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const property = block.getFieldValue('PROPERTY');
  
      let defaultValue = 'default';
      if (property === 'MoveIndicator') defaultValue = 'Vector3D.Zero';
      if (property === 'RotationIndicator') defaultValue = 'Vector2.Zero';
      if (property === 'RollIndicator') defaultValue = '0f';

      const code = `((${blockCode}) as IMyShipController)?.${property} ?? ${defaultValue}`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };


    csharpGenerator.forBlock['se_vector2d_create'] = function(block, csharpGenerator) {
      const x = csharpGenerator.valueToCode(block, 'X', csharpGenerator.ORDER_ATOMIC) || '0';
      const y = csharpGenerator.valueToCode(block, 'Y', csharpGenerator.ORDER_ATOMIC) || '0';
      const code = `new Vector2((float)${x}, (float)${y})`;
      return [code, csharpGenerator.ORDER_NEW];
    };

    csharpGenerator.forBlock['se_vector2d_get_component'] = function(block, csharpGenerator) {
      const vector = csharpGenerator.valueToCode(block, 'VECTOR', csharpGenerator.ORDER_MEMBER) || 'Vector2.Zero';
      const component = block.getFieldValue('COMPONENT');
      const code = `${vector}.${component}`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_get_block_position'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const code = `(${blockCode})?.GetPosition() ?? Vector3D.Zero`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_get_block_direction'] = function(block, csharpGenerator) {
      const blockCode = csharpGenerator.valueToCode(block, 'BLOCK', csharpGenerator.ORDER_ATOMIC) || 'null';
      const direction = block.getFieldValue('DIRECTION');
      const code = `(${blockCode})?.WorldMatrix.${direction} ?? Vector3D.Zero`;
      return [code, csharpGenerator.ORDER_MEMBER];
    };

    csharpGenerator.forBlock['se_gps_to_vector'] = function(block, csharpGenerator) {
      const gpsString = csharpGenerator.valueToCode(block, 'GPS_STRING', csharpGenerator.ORDER_ATOMIC) || '""';
      const code = `((Func<Vector3D>)(() => {
        Vector3D vector;
        if (Vector3D.TryParse((${gpsString}), out vector)) return vector;
        string[] parts = (${gpsString}).Split(':');
        if (parts.Length == 6) {
        double x, y, z;
        if (double.TryParse(parts[2], out x) && double.TryParse(parts[3], out y) && double.TryParse(parts[4], out z))
            return new Vector3D(x, y, z);
        }
        return Vector3D.Zero;
        }))()`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_vector_distance'] = function(block, csharpGenerator) {
      const vec1 = csharpGenerator.valueToCode(block, 'VEC1', csharpGenerator.ORDER_ATOMIC) || 'Vector3D.Zero';
      const vec2 = csharpGenerator.valueToCode(block, 'VEC2', csharpGenerator.ORDER_ATOMIC) || 'Vector3D.Zero';
      const code = `Vector3D.Distance(${vec1}, ${vec2})`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_vector_normalize'] = function(block, csharpGenerator) {
      const vector = csharpGenerator.valueToCode(block, 'VECTOR', csharpGenerator.ORDER_ATOMIC) || 'Vector3D.Zero';
      const code = `Vector3D.Normalize(${vector})`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_vector_dot_product'] = function(block, csharpGenerator) {
      const vec1 = csharpGenerator.valueToCode(block, 'VEC1', csharpGenerator.ORDER_ATOMIC) || 'Vector3D.Zero';
      const vec2 = csharpGenerator.valueToCode(block, 'VEC2', csharpGenerator.ORDER_ATOMIC) || 'Vector3D.Zero';
      const code = `Vector3D.Dot(${vec1}, ${vec2})`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL];
    };

    csharpGenerator.forBlock['se_vector_math_op'] = function(block) {
  const operator = block.getFieldValue('OP');
  // Меняем приоритет, чтобы скобки расставлялись правильно
  const order = (operator === 'MULTIPLY' || operator === 'DIVIDE') ? 
                csharpGenerator.ORDER_MULTIPLICATION : csharpGenerator.ORDER_ADDITION;
  const valueA = csharpGenerator.valueToCode(block, 'A', order) || 'new Vector3D()';
  const valueB = csharpGenerator.valueToCode(block, 'B', order) || 'new Vector3D()';
  let code;
  switch (operator) {
    case 'ADD':
      code = `${valueA} + ${valueB}`;
      break;
    case 'MINUS':
      code = `${valueA} - ${valueB}`;
      break;
    case 'CROSS':
      // Для функций приоритет обычно самый высокий
      code = `Vector3D.Cross(${valueA}, ${valueB})`;
      return [code, csharpGenerator.ORDER_FUNCTION_CALL]; // <-- Особый случай
    case 'MULTIPLY':
      code = `${valueA} * ${valueB}`;
      break;
    case 'DIVIDE':
      code = `${valueA} / ${valueB}`;
      break;
    default:
        throw Error('Unknown operator: ' + operator);
  }
  return [code, order]; // <-- ДОБАВЛЕНА ЭТА СТРОКА!
};

    // --- БЛОКИ КАМЕР ---

csharpGenerator.forBlock['se_camera_raycast'] = function(block, csharpGenerator) {
    // 1. Определяем имя и код нашей вспомогательной функции
    const functionName = 'CameraRaycastSafe';
    const functionCode = `
MyDetectedEntityInfo ${functionName}(IMyCameraBlock camera, double distance, float pitch = 0f, float yaw = 0f)
{
    if (camera == null) return new MyDetectedEntityInfo();
    camera.EnableRaycast = true; // Убеждаемся, что Raycast включен
    if (!camera.CanScan(distance)) return new MyDetectedEntityInfo(); // Проверяем, может ли камера сканировать на такое расстояние
    return camera.Raycast(distance, pitch, yaw);
}`;
    
    // 2. Добавляем функцию в "словарь определений". Blockly сам позаботится о дубликатах.
    csharpGenerator.definitions_[functionName] = functionCode;

    // 3. Получаем аргументы из блоков
    const camera = csharpGenerator.valueToCode(block, 'CAMERA', csharpGenerator.ORDER_NONE) || 'null';
    const distance = csharpGenerator.valueToCode(block, 'DISTANCE', csharpGenerator.ORDER_NONE) || '0';
    const pitch = csharpGenerator.valueToCode(block, 'PITCH', csharpGenerator.ORDER_NONE) || '0';
    const yaw = csharpGenerator.valueToCode(block, 'YAW', csharpGenerator.ORDER_NONE) || '0';

    // 4. Генерируем вызов нашей функции, используя ее известное имя
    const code = `${functionName}(${camera}, ${distance}, (float)${pitch}, (float)${yaw})`;
    return [code, csharpGenerator.ORDER_FUNCTION_CALL];
};

csharpGenerator.forBlock['se_camera_raycast_is_valid'] = function(block, csharpGenerator) {
    const entityInfo = csharpGenerator.valueToCode(block, 'ENTITY_INFO', csharpGenerator.ORDER_MEMBER) || 'new MyDetectedEntityInfo()';
    const code = `!${entityInfo}.IsEmpty()`;
    return [code, csharpGenerator.ORDER_LOGICAL_NOT];
};

csharpGenerator.forBlock['se_camera_raycast_get_property'] = function(block, csharpGenerator) {
    const entityInfo = csharpGenerator.valueToCode(block, 'ENTITY_INFO', csharpGenerator.ORDER_MEMBER) || 'new MyDetectedEntityInfo()';
    const property = block.getFieldValue('PROPERTY');
    
    let code;
    let order;

    switch (property) {
        case 'Name':
            code = `${entityInfo}.Name`;
            order = csharpGenerator.ORDER_MEMBER;
            break;
        case 'Type':
            code = `${entityInfo}.Type.ToString()`;
            order = csharpGenerator.ORDER_FUNCTION_CALL;
            break;
        case 'Relationship':
            code = `${entityInfo}.Relationship.ToString()`;
            order = csharpGenerator.ORDER_FUNCTION_CALL;
            break;
        case 'Velocity':
            code = `${entityInfo}.Velocity`;
            order = csharpGenerator.ORDER_MEMBER;
            break;
        case 'HitPosition':
            // HitPosition - это nullable Vector3D (Vector3D?), поэтому нужно .Value
            // Добавим проверку, чтобы избежать ошибки, если попадания не было
             code = `(${entityInfo}.HitPosition.HasValue ? ${entityInfo}.HitPosition.Value : Vector3D.Zero)`;
            order = csharpGenerator.ORDER_CONDITIONAL;
            break;
        case 'EntityId':
            code = `${entityInfo}.EntityId`;
            order = csharpGenerator.ORDER_MEMBER;
            break;
        default:
            throw new Error('Unknown property for se_camera_raycast_get_property');
    }

    return [code, order];
};


